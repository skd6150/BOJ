배낭문제(DP)

N개의 앱 A1, A2, ..., An과 각 앱들에 해당하는 메모리 M1, M2, ..., Mn 그리고 비용 C1, C2, ..., Cn이 있고
이때 N개의 앱 중 몇가지를 선택해서 M만큼의 메모리를 확보는 경우 중 C가 최소인 경우의 C를 출력하는 문제

이 상황을 배낭문제에 대입해서 비용(cost)를 배낭의 크기로 생각하고 넣을 수 있는 최대한의 메모리를 넣는 방식으로하면 dp로 해결이 가능함
앱들을 cost가 작은 순서대로, cost가 같다면 메모리가 큰 순서대로 정렬하고 dp[i] = max(dp[i], dp[i-현재 앱의 비용] + 현재 앱의 메모리)로 bottom-up

이후 dp배열을 돌면서 M이상이면서 가장 작은 원소의 인덱스를 출력